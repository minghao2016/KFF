#LyX 1.6.4 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass article
\begin_preamble
\usepackage {tikz}
\usetikzlibrary{arrows}
\usepackage{tikz}
\usetikzlibrary{calc,3d}
\end_preamble
\use_default_options true
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle plain
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
B-CALM 
\end_layout

\begin_layout Title
User Manual
\end_layout

\begin_layout Section
What is B-CALM?
\end_layout

\begin_layout Standard
B-CALM or Belgium California Light Machine is a super fast 3D GPU based
 Finite Difference Time Domain simulator.
 It utilizes NVDIA Graphical Processing Units with a compute capability
 of 1.3 or higher.
 B-CALM has a simulation speed between 1.0e10 and 1.5e10 cell-updates per
 minute and GPU unit.
 B-CALM is interfaced with Matlab for both input and output.
 It incorporates the following features
\end_layout

\begin_layout Itemize
Variable meshing
\end_layout

\begin_layout Itemize
Multiple-pole Lorentz materials
\end_layout

\begin_layout Itemize
CPML-Absorbing conditions
\end_layout

\begin_layout Itemize
User defined exitation
\end_layout

\begin_layout Itemize
Built in exitation( Gaussian beam at any angle, plane wave)
\end_layout

\begin_layout Itemize
Comprehensive input output structure in Matlab
\end_layout

\begin_layout Standard
This manual assumes that the user is acquinted with FDTD and electromagnetic
 simulations in general.
\end_layout

\begin_layout Section
Installation 
\end_layout

\begin_layout Subsection
Installation of the GPU unit
\end_layout

\begin_layout Subsubsection
Download and install the drivers for the GPU compatible card
\end_layout

\begin_layout Standard
See:
\emph on
 http://www.nvidia.com/Download/index.aspx?lang=en-us 
\emph default
for more info.
\end_layout

\begin_layout Subsubsection
Download and install the latest CUDA toolkit
\end_layout

\begin_layout Standard
See: 
\emph on
http://developer.nvidia.com/object/cuda_3_1_downloads.html
\emph default
 for more info.
\end_layout

\begin_layout Subsection
Installation of B-CALM
\end_layout

\begin_layout Subsubsection
Download the latest B-CALM version from the Stanford servers
\end_layout

\begin_layout Standard

\emph on
http://www.stanford.edu/~pwahl/BCALM/latest_backup.tar.gz/
\end_layout

\begin_layout Subsubsection
Untar the downloaded file in the directory where you want to install it
\end_layout

\begin_layout Standard

\emph on
ex: ~/BCALM/
\end_layout

\begin_layout Subsubsection
Create the target directory ./obj where the Make will dump the compiled objects
 and the linked program
\end_layout

\begin_layout Standard

\emph on
mkdir ~/BCALM/obj
\end_layout

\begin_layout Subsubsection
Make the program
\end_layout

\begin_layout Standard

\emph on
~/BCALM/CUDA_code/make
\end_layout

\begin_layout Standard
It is possible that some libraries are not installed on your computer by
 default.
 Typically the following ones are not installed by default
\end_layout

\begin_layout Enumerate

\emph on
sudo apt-get install apt-file sudo apt-file update
\end_layout

\begin_layout Enumerate

\emph on
sudo apt-get install g++ 
\end_layout

\begin_layout Enumerate

\emph on
sudo apt-get install fftw3-dev 
\end_layout

\begin_layout Enumerate

\emph on
sudo apt-get install libhdf5-serial-dev 
\end_layout

\begin_layout Enumerate

\emph on
sudo apt-get install libhdf5-mpich-dev
\end_layout

\begin_layout Enumerate

\emph on
sudo apt-get install libhdf5-serial-1.6.4-0c2 
\end_layout

\begin_layout Standard
If succesful the executable fdtd is created in the 
\emph on
obj
\emph default
 directory
\end_layout

\begin_layout Section
Using B-CALM
\end_layout

\begin_layout Subsection
Introduction
\end_layout

\begin_layout Standard
The compiled program 
\emph on
fdtd 
\emph default
takes a 
\emph on
HDF5-file 
\emph default
as input that is generated by Matlab that contains all the information relevant
 to the simulation.This HDF5 file contains the following information:
\end_layout

\begin_layout Itemize
The amount timesteps
\end_layout

\begin_layout Itemize
The utilized mesh
\end_layout

\begin_layout Itemize
The optical properties of the materials used in the simulation
\end_layout

\begin_layout Itemize
The structres within the mesh utilizing those materials
\end_layout

\begin_layout Itemize
The boundary conditions of the simulation space
\end_layout

\begin_layout Itemize
The sources and their properties
\end_layout

\begin_layout Itemize
The zones within the simulation space that need to be outputted.
\end_layout

\begin_layout Standard
Once the simultion is finished 
\emph on
fdtd 
\emph default
creates two files per requested per output zone.
 One containing the timetraces, the other containting their Fourier transform.
 These files can be read in Matlab in order to visualize and process the
 results.
 In this elementary manual we will go over each of these steps trough a
 illustratory exemples.
\end_layout

\begin_layout Section
Example: Dielectric Cube
\end_layout

\begin_layout Standard
This example can be found as
\emph on
 ./Matlab/Testcases/DielectricCube.
 
\emph default
The goal of the simulation is to compute the fields of a dielectric cube
 in air illuminated by a Plane Wave or a Gaussian Beam.
 When creating a simulation in Matlab, there is one object in which all
 the information concerning the simulation is stacked.
 In this exemple it is called 
\emph on
GRID
\emph default
.
 
\end_layout

\begin_layout Subsection
Create the mesh
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sub:Coarse Grid"

\end_inset


\end_layout

\begin_layout Standard
In this part we discretize a cubic part of space in a small fixed sized
 rectangles of a 
\series bold
fixed
\series default
 size creating a mesh.
 How to create a mesh of 
\series bold
variable sized
\series default
 rectangles for improved precision in will be illustrated in a later exemple.
 A object 
\emph on
simul
\emph default
 that contains the following fields is passed to the function 
\emph on
CreateConstantGrid
\emph default
.
\end_layout

\begin_layout Itemize
x: Approximate total simulation size in the X direction
\end_layout

\begin_layout Itemize
y: Approximate total simulation size in the Y direction 
\end_layout

\begin_layout Itemize
z: Approximate total simulation size in the Z direction
\end_layout

\begin_layout Itemize
dx: Cell size in the X direction
\end_layout

\begin_layout Itemize
dy: Cell size in the Y direction
\end_layout

\begin_layout Itemize
dz: Cell size in the Z direction 
\end_layout

\begin_layout Itemize
pad: The size of the simulation space in the 
\series bold
X and the Y direction has to be divisible by 16.
 
\series default
When set to one a grid is padded so that this is true.
\end_layout

\begin_layout Standard
The mesh is stored in the Grid object as
\end_layout

\begin_layout Itemize
Grid.grid.x
\end_layout

\begin_layout Itemize
Grid.grid.y
\end_layout

\begin_layout Itemize
Grid.grid.z
\end_layout

\begin_layout Standard
and consists of an array of the size of individual cells in each direction.
 In this exemple, this is a constant array.
\end_layout

\begin_layout Subsection
Defining the number of timesteps and temporal increment per timestep
\end_layout

\begin_layout Standard
The number of timesteps is the amount of iterartions 
\emph on
fdtd 
\emph default
will perform a field update.
 This number must be high enough so that all the fields have reasonably
 been absorbed in the absorbing boundaries.
 
\end_layout

\begin_layout Standard

\emph on
Grid.info.tt=nsteps 
\emph default
sets the number of timesteps.
\end_layout

\begin_layout Standard

\emph on
Grid.info.dt=dt 
\emph default
sets the temporal increment per timestep where
\end_layout

\begin_layout Standard
\begin_inset Formula \[
dt<\frac{CF}{c\sqrt{\frac{1}{dx^{2}}+\frac{1}{dy^{2}}+\frac{1}{dz^{2}}}}\]

\end_inset


\end_layout

\begin_layout Standard
with 
\begin_inset Formula $c$
\end_inset

 the velocity of light and 
\emph on

\begin_inset Formula $dx$
\end_inset


\emph default
, 
\begin_inset Formula $dy$
\end_inset

 and 
\begin_inset Formula $dz$
\end_inset

 the cell size in the 
\emph on
x y z 
\emph default
direction.
 
\begin_inset Formula $CF<1$
\end_inset

 is the 
\emph on
Courant Factor 
\emph default
has to be smaller than one for stability.
\end_layout

\begin_layout Subsection
Defining the materials
\end_layout

\begin_layout Standard
In this simulation we define two types of materials
\end_layout

\begin_layout Enumerate

\series bold
Ambient Material
\series default
: Is the material that fills the simulation space by default.
\end_layout

\begin_deeper
\begin_layout Standard

\emph on
Grid=AddMat(Grid,'Air',1,'ambient') 
\emph default
where 
\emph on
Air 
\emph default
is the name of the material 
\emph on
1 
\emph default
is the real part of the relative permitivitty and 'ambient' sets that particular
 material as Ambient
\end_layout

\end_deeper
\begin_layout Enumerate

\series bold
Regular Dielectric: 
\series default
Is a material with a different refractive index than ambient material.
\end_layout

\begin_deeper
\begin_layout Standard

\emph on
Grid=AddMat(Grid,'Glass',(1.4)^2) 
\emph default
where 
\emph on
Glass 
\emph default
is the name of the material 
\emph on

\begin_inset Formula $1.4^{2}$
\end_inset


\emph default
 is the real part of the relative permitivitty.
\end_layout

\end_deeper
\begin_layout Subsection
Add structures
\end_layout

\begin_layout Standard
For every structure one has to define a 
\emph on
zone 
\emph default
object that defines the dimensions of a cube that contains the material
 with the following properties
\end_layout

\begin_layout Itemize
zone.x, zone.y, zone.z: Starting point of the material cube in the x, y and
 z direction in number of cells.
\end_layout

\begin_deeper
\begin_layout Itemize
zone.x=1 adds a material starting from the first cell in the x direction.
\end_layout

\end_deeper
\begin_layout Itemize
zone.dx, zone.dy, zone.dz: Size of the cube in the x ,y, and z direction.
\end_layout

\begin_deeper
\begin_layout Itemize
zone.dx=0 adds 1 cell in the X direction
\end_layout

\begin_layout Itemize
zone.dx='end' adds material until the simulation border.
\end_layout

\end_deeper
\begin_layout Itemize
zone.name='Glass' Adds a the material Glass
\end_layout

\begin_layout Standard

\emph on
grid=AddMatZone(grid,zone)
\emph default
 adds the material to the grid.
\end_layout

\begin_layout Subsection
Add Sources
\end_layout

\begin_layout Standard
In BCALM all sources are so called 
\emph on
soft sources
\emph default
 meaning that a they act as a source of electromagnetic radation in the
 simulation space,while remaining transparant.
 In other words, a source feeds a structure but doesn't change its optical
 properties.
\end_layout

\begin_layout Standard
In BCALM all sources are sinusoidal with a Gaussian envelope by
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
F_{source}(t)=|F_{in}|\sin(\omega t+\angle F_{in})e^{\left[\frac{(t/t_{s}-\mu_{t})}{\sigma_{t}}\right]^{2}}\label{eq:source}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
where 
\begin_inset Formula $F_{in}$
\end_inset

 is the complex amplitude of the sourced field, 
\begin_inset Formula $\omega$
\end_inset

 the angular frequency, 
\begin_inset Formula $t$
\end_inset

 the time in seconds, 
\begin_inset Formula $\mu_{t}$
\end_inset

 the temporal mean of the gaussian envelope in timesteps and 
\begin_inset Formula $\sigma_{t}$
\end_inset

 the standard deviation of the Gaussian envelope in timesteps.
\end_layout

\begin_layout Subsubsection
Plane Wave
\end_layout

\begin_layout Standard
To add a plane wave source on has to define an object 
\emph on
sourcePW
\emph default
 that contains all the properties of the source and pass it to the function
 
\emph on
Grid=DefineSpecialSource(Grid,sourcePW)
\emph default
 to add the source to the grid.
 
\end_layout

\begin_layout Itemize
sourcePW.x, sourcePW.y, sourcePW.z: Starting point of the source zone in the
 x,y,z direction.
\end_layout

\begin_layout Itemize
sourcePW.dx, sourcePW.dy, sourcePW.dz: Size of the exitation zone in the x,y,z
 direction.
\end_layout

\begin_layout Itemize
sourcePW.type : Sets the type of the source
\end_layout

\begin_deeper
\begin_layout Itemize
constant: sources in the zone are in phase as required for a plane wave.
\end_layout

\end_deeper
\begin_layout Itemize
sourcePW.omega: 
\begin_inset Formula $\omega$
\end_inset

 in 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:source"

\end_inset

.
\end_layout

\begin_layout Itemize
sourcePW.mut: 
\begin_inset Formula $\mu_{t}$
\end_inset

 in 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:source"

\end_inset

.
\end_layout

\begin_layout Itemize
sourcePW.sigmat: 
\begin_inset Formula $\sigma_{t}$
\end_inset

 in 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:source"

\end_inset

.
\end_layout

\begin_layout Itemize
sourcePW .Ex, .Ey, .Ez,.Hx, .Hy, .Hz: Complex amplitude of the sourced field Ex,
 Ey, Ez, Hx, Hy, Hz.
\end_layout

\begin_layout Subsubsection
Gaussian Beam
\end_layout

\begin_layout Standard
BCALM has a built in Gaussian beam exitation that can exite a Gaussian beam
 from an angle and with a certain bean waist onto a specific point in the
 simulation space.
 The spacial properties of the Gaussian beam are defined by following subseccque
nt equations.
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
F(z,r)=\frac{w_{0}}{w(z)}\exp\left(\frac{-r^{2}}{w^{2}(z)}\right)\exp\left(-ikz-ik\frac{r^{2}}{2R(z)}+i\zeta(z)\right)\label{eq:Gaussian1}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
w(z)=w_{0}\sqrt{1+\left(\frac{z}{z_{\mathrm{R}}}\right)^{2}}\label{eq:waist}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
z_{\mathrm{R}}=\frac{\pi w_{0}^{2}}{\lambda}\label{eq:ReighleyRange}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
\zeta(z)=\arctan\left(\frac{z}{z_{\mathrm{R}}}\right)\label{eq:Gouy}\end{equation}

\end_inset


\end_layout

\begin_layout Standard
where 
\begin_inset Formula $F(z,r)$
\end_inset

 denotes the exited field, 
\begin_inset Formula $w_{0}$
\end_inset

the minimal beamwaist, 
\begin_inset Formula $z$
\end_inset

 the distance parallel to the propagation direction and 
\begin_inset Formula $r$
\end_inset

 the radial distance to the center of the beam.
 A Gaussian beam is exited from one or several planes in the simulation
 space.
 
\end_layout

\begin_layout Standard
To define a Gaussian Beam one has to define an object with the following
 additional properties upon the Plane Wave properties:
\end_layout

\begin_layout Itemize
source.x,.y,.z denotes the postion of the focus of the Gaussian Beam in the
 x, y and z direction.
\end_layout

\begin_layout Itemize
source.facex, .facey, .facez denotes, if used, the fixed coordinate in the
 x, y or z direction of the plane from wich the Gaussian beam is exited
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $source.facex=20$
\end_inset

 means the Gaussian Beam is exited from the surface 
\begin_inset Formula $x=20$
\end_inset

.
 The value of the Gaussian Beam is calculated and exited for 
\emph on
all 
\emph default
the cells on the plane 
\begin_inset Formula $x=20$
\end_inset

.
 More than one surface should be used if the beam is exited at a shallow
 angle.
\end_layout

\end_deeper
\begin_layout Itemize
source.type='gaussianbeam' to exite a Gaussian Beam
\end_layout

\begin_layout Itemize
source.w0: 
\begin_inset Formula $w_{0}$
\end_inset

in 
\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:Gaussian1"

\end_inset


\end_layout

\begin_layout Itemize
source.n: Refractive index of the material in which the Gaussian Beam propagates.
\end_layout

\begin_layout Itemize
source.phi: Angle of the k vector of the Gaussian Beam to and the Z axis.
\end_layout

\begin_layout Itemize
source.tetha: Angle between the projection of the k vector of the Gaussian
 Beam on the XY plane and the X axis.
\end_layout

\begin_layout Standard

\emph on
Grid=DefineSpecialSource(Grid,source)
\emph default
 adds the Gaussian Beam source.
\end_layout

\begin_layout Subsection
Define Abosorbing Boundary Conditions
\end_layout

\begin_layout Standard
In order to limit the simulation space with a reflectionless boundary BCALM
 has preprogrammed 
\emph on
Perfect Matched Layers 
\emph default
that absorb the incoming fields at angle with very little reflections.
 
\end_layout

\begin_layout Standard
To define a CPML one has to define an object with the follwing properties
\end_layout

\begin_layout Itemize
cpml.dx, .dy, .dz sets the thickness of the CPML layer in the x y and z direction.
 8 to 10 cells are sufficient, 15 is the maximum.
\end_layout

\begin_layout Itemize
cpml.xneg, yneg, zneg: If one, adds a CPML on the left border in the x y
 or z direction.
\end_layout

\begin_layout Itemize
cpml.xpos, ypos, zpos: If one, adds a CPML on the right border in the x y
 or z direction.
\end_layout

\begin_layout Itemize
cpml.m: Order of the CPML, usually 4.
\end_layout

\begin_layout Itemize
cpml.amax: CPML specific, usually 0.2.
\end_layout

\begin_layout Itemize
cpml.kmax: CPML specific, usually 1.
\end_layout

\begin_layout Itemize
cpml.smax: CPML specific, usually 210000.
\end_layout

\begin_layout Standard

\emph on
Grid=AddCPML(Grid,cpml) 
\emph default
adds the CPML to the Grid.
\end_layout

\begin_layout Subsection
Define Outputs
\end_layout

\begin_layout Standard
To save memory space and to keep output files relatively small BCALM requires
 the user to define the zones in the simulation space that need to be outputted.
 BCALM returns both, the timetraces and their Fourier transforms.
 In order to define an output, an object with following properties has to
 be defined.
\end_layout

\begin_layout Itemize
output.x, output.y, output.z: Starting point of the output zone in the x,y,z
 direction.
\end_layout

\begin_layout Itemize
output.dx, output.dy, output.dz: Size of the output zone in the x,y,z direction.
\end_layout

\begin_layout Itemize
output.foutstart: Lower boundary of the frequency interval of the output.
\end_layout

\begin_layout Itemize
output.foutstop: Upper boudary of the frequency interval of the output
\end_layout

\begin_layout Itemize
output.deltafmin: Minimal frequency resolution of the frequency output.
\end_layout

\begin_layout Itemize
output.deltaT: (Facultative) Number of timesteps between each output in time
 domain.
 If not set, minimal deltaT is taken to accomondate the required frequency
 bandwidth.
\end_layout

\begin_layout Itemize
output.name: Name of the output.
 
\end_layout

\begin_deeper
\begin_layout Itemize
Filename of the file containing the timesteps '($output.name)'
\end_layout

\begin_layout Itemize
Filename of the file containing the Fourier Transforms '($output.name)FFT'
\end_layout

\end_deeper
\begin_layout Itemize
output.field: Sets the fields that need to be outputted
\end_layout

\begin_deeper
\begin_layout Itemize

\emph on
output.field=[{'Ex'},{'Hy'},{'Hz'}] 
\emph default
outputs the Ex, Hy and Hz fields.
\end_layout

\end_deeper
\begin_layout Subsection
Launch the Simultation
\end_layout

\begin_layout Subsubsection
In matlab
\end_layout

\begin_layout Standard
To launch a simulation one has to create an object with the following fields.
\end_layout

\begin_layout Itemize
SimulInfo.WorkPlace: This path is set as base path in Matlab.
\end_layout

\begin_layout Itemize
SimulInfo.SimlatorExec: Path to the executable 
\emph on
fdtd
\emph default
.
\end_layout

\begin_layout Itemize
SimulInfo.infile: Path to the input HDF5 file to be created.
\end_layout

\begin_layout Itemize
SimulInfo.outfile: Path to the directory where the outputfiles are created.
\end_layout

\begin_layout Itemize
SimulInfo.PrintStep: (facultative) Number of timesteps every other which
 fdtd outputs the progress of the simulation.
\end_layout

\begin_layout Standard

\emph on
LocalSimulate(Grid, SimulInfo) 
\emph default
creates and executes the simulation.
\end_layout

\begin_layout Subsubsection
By command line
\end_layout

\begin_layout Standard
To lauch a simulation by command line:
\end_layout

\begin_layout Enumerate
Create the input HDF5 file in Matlab
\end_layout

\begin_deeper
\begin_layout Enumerate

\emph on
hd5_export(infile,Grid) 
\emph default
creates the HDF5 file at location 
\emph on
inflile
\end_layout

\end_deeper
\begin_layout Enumerate
Exucute the command line with the right options
\end_layout

\begin_deeper
\begin_layout Enumerate
-i Input File (default is InputFile) 
\end_layout

\begin_layout Enumerate
-o Output File (default is OutputFile) 
\end_layout

\begin_layout Enumerate
-f Progress frequency updates (in time steps) 
\end_layout

\begin_layout Enumerate
-F Generate FFT's 
\end_layout

\begin_layout Enumerate
-T Generate Timesteps 
\end_layout

\end_deeper
\begin_layout Enumerate
Example: 
\emph on
fdtd -i Inputfile -o Outputfile -f 1500 -F -T
\end_layout

\begin_layout Subsection
Process the ouputs
\end_layout

\begin_layout Standard
Once the simulation is completed the outputs can be plotted and postprocessed
 using the Matlab function 
\emph on
[Data,pos]=PlotData (full,Grid,outputfile).
\end_layout

\begin_layout Standard
Full is an object that contains the following fields.
\end_layout

\begin_layout Itemize
full.x: denotes which part of 
\emph on
outputfile 
\emph default
needs to be plotted in the x dimention.
\end_layout

\begin_deeper
\begin_layout Itemize

\emph on
full.x='all' 
\emph default
means that the whole x dimention in 
\emph on
outputfile 
\emph default
plotted
\end_layout

\begin_layout Itemize

\emph on
full.x=(1:10) 
\emph default
means that the first ten elements in the x dimention in 
\emph on
outputfile 
\emph default
are plotted.
\end_layout

\begin_layout Itemize

\emph on
full.x=1 
\emph default
means that only the first element in the x dimention in 
\emph on
outputfile 
\emph default
is plotted.
\end_layout

\begin_layout Standard
NOTE: The coordinates are in number of cells 
\series bold
in the output file 
\series default
not in the actual simulation space.
 In other words, if one only outputs the plane x=64 in the simulation space,
 full.x must be one as the output is only one cell wide in the x direction.
\end_layout

\end_deeper
\begin_layout Itemize
full.y: Same as full.x but in the y dimention.
\end_layout

\begin_layout Itemize
full.z: Same as full.z but in the z dimention.
\end_layout

\begin_layout Itemize
full.field: Denotes which field present in outputfile has to be plotted
\end_layout

\begin_deeper
\begin_layout Standard
The following fields can be exported.
\end_layout

\begin_layout Itemize
(F)_real: Real part of F where (F = Ex, Ey, Ez, Hx, Hy, Hz)
\emph on
 - ex full.field=Ex_real
\end_layout

\begin_layout Itemize
(F)_imag: Imaginary part of F where (F = Ex, Ey, Ez, Hx, Hy, Hz)
\emph on
 - ex full.field=Ex_imag
\end_layout

\begin_layout Itemize
(F)_phase: Phase of F where (F = Ex, Ey, Ez, Hx, Hy, Hz)
\emph on
 - ex full.field=Ex_phase
\end_layout

\begin_layout Itemize
(F)_abs: Absolute value of F where (F = Ex, Ey, Ez, Hx, Hy, Hz)
\emph on
 - ex full.field=Ex_abs
\end_layout

\begin_layout Itemize
(F)_complex: Complex F where (F = Ex, Ey, Ez, Hx, Hy, Hz)
\emph on
 - ex full.field=Ex_complex
\end_layout

\begin_layout Itemize
topology: Plots the properties of the structure i.e.
 to verify the structure has been properly defined.
\end_layout

\begin_layout Itemize
ME2_abs: Absolute value of the total Electric field i.e 
\begin_inset Formula $E_{x}^{2}+E_{y}^{2}+E_{z}^{2}$
\end_inset


\emph on
- ex
\emph default
 
\emph on
full.field=ME2_abs
\end_layout

\begin_layout Itemize
HE2_abs: Absolute value of the total Electric field i.e 
\begin_inset Formula $H_{x}^{2}+H_{y}^{2}+H_{z}^{2}$
\end_inset


\emph on
- ex full.field=HE2_abs
\end_layout

\begin_layout Itemize
P(D)_(T): Real part, imaginary part, phase,absolute value or complex(T=real,
 imag, phase, abs, complex) Poynting vector in the x, y or z(D=x, y or z)
 direction-
\emph on
ex full.field=Py_complex
\end_layout

\end_deeper
\begin_layout Itemize
full.data: Denotes which part data in frequency or in time domain has to
 be plotted
\end_layout

\begin_deeper
\begin_layout Itemize

\emph on
full.data='all' 
\emph default
plots all the timesteps (if 
\emph on
outputfile
\emph default
 contains timetraces) or all the frequency bins (if 
\emph on
outputfile 
\emph default
contains FFT's)
\end_layout

\begin_layout Itemize

\emph on
full.data= 54 
\emph default
plots the 54th frequency bin or 54th outputted timestep.
\end_layout

\begin_deeper
\begin_layout Itemize
The function 
\emph on
frequency2index
\emph default
 converts a frequency to an index.
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
full.plottype: Donotes the type of plot
\end_layout

\begin_deeper
\begin_layout Itemize

\emph on
full.plottype='Linear' 
\emph default
Linear plot.
\end_layout

\begin_layout Itemize

\emph on
full.plottype='log' 
\emph default
Logaritmic plot.
\end_layout

\end_deeper
\begin_layout Itemize
full.noplot: If one no plot is generated, the data and pos is availble.
\end_layout

\begin_layout Itemize
full.figure: Axis to use for the plot
\end_layout

\begin_deeper
\begin_layout Itemize

\emph on
full.figure=gca;
\end_layout

\end_deeper
\begin_layout Standard

\emph on
[Data,pos]=PlotData (full,Grid,outputfile) 
\emph default
generates the plot using with the results with path 
\emph on
outputfile.
 
\emph default
In addition the data is outputted available as Data and the axis of the
 plot are outputted as an object pos.
\end_layout

\begin_layout Itemize
pos.x contains the x axis of the generated plot.
\end_layout

\begin_layout Itemize
pos.y contains the y axis of the generated plot.
\end_layout

\begin_layout Standard
pos.z contains the z axis of the generated plot.
\end_layout

\begin_layout Section
Exemple : Plasmonic waveguide with dipole antenna.
\end_layout

\begin_layout Standard
This example can be found as
\emph on
 ./Matlab/Testcases/FullWaveAntenna_Dipole.m.
 
\emph default
The goal of this exemple is to exite a dipole like metallic antenna exited
 with a 
\series bold
Gaussian Beam
\series default
 and utilizing 
\series bold
metals, variable gridding
\series default
 and 
\series bold
symmetry
\series default
.
 Some aspects are the same as in the previous example.
 
\end_layout

\begin_layout Subsection
Create the variable grid
\end_layout

\begin_layout Standard
Creating a variable grid is a 
\emph on
two step process.
 
\emph default
In the first step a basic constant coarse grid is created in the same way
 as in previous exemple.
 Then, using the coordinate system of the coarse grid, a 
\emph on
zone 
\emph default
in the coarse grid is defined which will be have a smaller mesh, creating
 a new grid, with variable cell size.
 The physical size of the total grid doesn't change but but now contains
 more cells as part of the grid will be more discretized as is depicted
 in figure 
\begin_inset CommandInset ref
LatexCommand vref
reference "fig:Coarse-and-variable"

\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
begin{tikzpicture}[scale=0.8]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
draw[very thick,->] (0, 0) -- (11, 0) node[below,pos=0.5] {$X$};
\end_layout

\begin_layout Plain Layout


\backslash
draw[very thick,->] (0, 0) -- ( 0,11) node[left,pos=0.5] {$Y$};
\end_layout

\begin_layout Plain Layout


\backslash
draw[->] (5, 5) -- ( 7,11) node[above]{$(middle.x,middle.y)$};
\end_layout

\begin_layout Plain Layout


\backslash
fill(5,5) circle (2pt);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
draw[thick,step=1cm] (0,0) grid (10,10);
\end_layout

\begin_layout Plain Layout


\backslash
draw[red] (3.5-0.01,0) grid [xstep=.25,ystep=1] (6.5,10);
\end_layout

\begin_layout Plain Layout


\backslash
draw[red] (0,3.5-0.01) grid [ystep=.25,xstep=1] (10,6.5);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
draw[thick,dashed] (-1,7) --(10,7) ;
\end_layout

\begin_layout Plain Layout


\backslash
draw[thick,dashed] (-1,3) --(10,3) ;
\end_layout

\begin_layout Plain Layout


\backslash
draw[thick,dashed] (-1,8) --(10,8) ;
\end_layout

\begin_layout Plain Layout


\backslash
draw[thick,dashed] (0,3) --(11,3)node[right]{$fine.y$} ;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
draw[thick,<->] (-1,3)--(-1,7)node[left,pos=0.5]{$fine.dy+1$};
\end_layout

\begin_layout Plain Layout


\backslash
draw[thick,<->] (-1,8)--(-1,7)node[left,pos=0.5]{$simul.dy$};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
draw[thin,dashed,red] (0,6) --(11,6) ;
\end_layout

\begin_layout Plain Layout


\backslash
draw[thin,dashed,red] (0,5.5) --(11,5.5) ;;
\end_layout

\begin_layout Plain Layout


\backslash
draw[thin,<->] (11,5.5)--(11,6)node[right,pos=0.5]{$2fine.dymin$};
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture} 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Coarse-and-variable"

\end_inset

Coarse and variable gridding
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Creating the coarse grid
\end_layout

\begin_layout Standard
A coarse grid is created like in previous exemple with large cell size.
 See 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Coarse Grid"

\end_inset

 for more info.
\end_layout

\begin_layout Subsubsection
Creating the variable grid within the coarse grid.
\end_layout

\begin_layout Standard
In order to create a finer grid the one object 
\emph on
fine 
\emph default
needs to be created with the following properties.
\end_layout

\begin_layout Itemize
fine.dxmin: Minimal cellsize in the X direction in the finely gridded zone.
\end_layout

\begin_layout Itemize
fine.dymin: Minimal cellsize in the Y direction in the finely gridded zone.
\end_layout

\begin_layout Itemize
fine.dzmin: Minimal cellsize in the Z direction in the finely gridded zone.
\end_layout

\begin_layout Itemize
fine.x: Start position of the finely gridded zone in the X direction in number
 of cells in the coarse grid.
\end_layout

\begin_layout Itemize
fine.y: Start position of the finely gridded zone in the Y direction in number
 of cells in the coarse grid.
\end_layout

\begin_layout Itemize
fine.z: Start position of the finely gridded zone in the Z direction in number
 of cells in the coarse grid.
\end_layout

\begin_layout Itemize
fine.dx: Size of the finely gridded zone in the X direction in number of
 cells in the coarse grid.
\end_layout

\begin_layout Itemize
fine.dy: Size of the finely gridded zone in the Y direction in number of
 cells in the coarse grid.
\end_layout

\begin_layout Itemize
fine.dz: Size of the finely gridded zone in the Z direction in number of
 cells in the coarse grid.
\end_layout

\begin_layout Itemize
fine.pad: If one, the new grid will be padded in the X and the Y direction
 so that the total size of the simulation is divisible by 16 in the X direction
 and the Y direction.
\end_layout

\begin_layout Itemize
fine.padtype: Sets weather the simulation space needs to be padded symmetricaly
 or not.
\end_layout

\begin_deeper
\begin_layout Itemize

\emph on
fine.padtype='symetric' 
\emph default
will add half the cells on the left and half the cells on the right in each
 direction.
\end_layout

\end_deeper
\begin_layout Itemize
fine.uponly.x: When symmetric boundary conditions are used, the variable grid
 needs to start without a smooth transition from the coarse grid.
 When one the obtained grid is depicted in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Uponly"

\end_inset

.
 It works similarly in the y and z direction.
\end_layout

\begin_layout Itemize
fine.downonly.x: When symmetric boundary conditions are used, the variable
 grid needs to start without a smooth transition from the coarse grid.
 When one the obtained grid is depicted in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:downonly"

\end_inset

.
 It works similarly in the y and z direction.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
begin{tikzpicture}[scale=0.6]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
draw[very thick,->] (0, 0) -- (11, 0) node[below,pos=0.5] {$X$};
\end_layout

\begin_layout Plain Layout


\backslash
draw[very thick,->] (0, 0) -- ( 0,11) node[left,pos=0.5] {$Y$};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
draw[->] (0, 5) -- ( 10,11) node[above]{$(middle.x,middle.y)$};
\end_layout

\begin_layout Plain Layout


\backslash
fill(0,5) circle (2pt);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
draw[line width=4pt,dotted, green!80!black] (0, -1) -- ( 0,11) node[above,black]
 {PEC or PMC symetric wall};
\end_layout

\begin_layout Plain Layout


\backslash
draw[thick,step=1cm] (0,0) grid (10,10);
\end_layout

\begin_layout Plain Layout


\backslash
draw[red] (0-0.01,0) grid [xstep=.25,ystep=1] (3.5,10);
\end_layout

\begin_layout Plain Layout


\backslash
draw[red] (0,3.5-0.01) grid [ystep=.25,xstep=1] (10,6.5);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
draw[thick,dashed] (-1,7) --(10,7) ;
\end_layout

\begin_layout Plain Layout


\backslash
draw[thick,dashed] (-1,3) --(10,3) ;
\end_layout

\begin_layout Plain Layout


\backslash
draw[thick,dashed] (-1,8) --(10,8) ;
\end_layout

\begin_layout Plain Layout


\backslash
draw[thick,dashed] (0,3) --(11,3)node[right]{$fine.y$} ;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
draw[thick,<->] (-1,3)--(-1,7)node[left,pos=0.5]{$fine.dy$};
\end_layout

\begin_layout Plain Layout


\backslash
draw[thick,<->] (-1,8)--(-1,7)node[left,pos=0.5]{$simul.dy$};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
draw[thin,dashed,red] (0,6) --(11,6) ;
\end_layout

\begin_layout Plain Layout


\backslash
draw[thin,dashed,red] (0,5.5) --(11,5.5) ;;
\end_layout

\begin_layout Plain Layout


\backslash
draw[thin,<->] (11,5.5)--(11,6)node[right,pos=0.5]{$2fine.dymin$};
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture} 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Uponly"

\end_inset

Coarse and variable gridding with 
\begin_inset Formula $fine.uponly.x=1$
\end_inset

 and 
\begin_inset Formula $fine.x=1$
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
begin{tikzpicture}[scale=0.6]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
draw[very thick,->] (0, 0) -- (11, 0) node[below,pos=0.5] {$X$};
\end_layout

\begin_layout Plain Layout


\backslash
draw[very thick,->] (0, 0) -- ( 0,11) node[left,pos=0.5] {$Y$};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
draw[->] (10, 5) -- ( 1,11) node[above]{$(middle.x,middle.y)$};
\end_layout

\begin_layout Plain Layout


\backslash
fill(10,5) circle (2pt);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
draw[line width=4pt,dotted, green!80!black] (10, -1) -- ( 10,11) node[above,blac
k] {PEC or PMC symetric wall};
\end_layout

\begin_layout Plain Layout


\backslash
draw[thick,step=1cm] (0,0) grid (10,10);
\end_layout

\begin_layout Plain Layout


\backslash
draw[red] (7.5-0.01,0) grid [xstep=.25,ystep=1] (10,10);
\end_layout

\begin_layout Plain Layout


\backslash
draw[red] (0,3.5-0.01) grid [ystep=.25,xstep=1] (10,6.5);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
draw[thick,dashed] (-1,7) --(10,7) ;
\end_layout

\begin_layout Plain Layout


\backslash
draw[thick,dashed] (-1,3) --(10,3) ;
\end_layout

\begin_layout Plain Layout


\backslash
draw[thick,dashed] (-1,8) --(10,8) ;
\end_layout

\begin_layout Plain Layout


\backslash
draw[thick,dashed] (0,3) --(11,3)node[right]{$fine.y$} ;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
draw[thick,<->] (-1,3)--(-1,7)node[left,pos=0.5]{$fine.dy$};
\end_layout

\begin_layout Plain Layout


\backslash
draw[thick,<->] (-1,8)--(-1,7)node[left,pos=0.5]{$simul.dy$};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
draw[thin,dashed,red] (0,6) --(11,6) ;
\end_layout

\begin_layout Plain Layout


\backslash
draw[thin,dashed,red] (0,5.5) --(11,5.5) ;;
\end_layout

\begin_layout Plain Layout


\backslash
draw[thin,<->] (11,5.5)--(11,6)node[right,pos=0.5]{$2fine.dymin$};
\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture} 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:downonly"

\end_inset

Coarse and variable gridding with 
\begin_inset Formula $fine.downonly.x=1$
\end_inset

 and 
\begin_inset Formula $fine.dx=\mbox{'end'}$
\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
A 
\emph on
fine
\emph default
 object is created for each part of the coarse grid whose mesh needs to
 be refined and are added to an object array FINE.
\end_layout

\begin_layout Standard

\emph on
FINE{1}=fine;
\end_layout

\begin_layout Standard

\emph on
FINE{2}=otherfinezone;
\end_layout

\begin_layout Standard

\emph on
[Grid,middle]=encap(Grid,FINE) 
\emph default
creates the finer grid.
 
\emph on
Grid 
\emph default
is the new grid that containes the refined mesh.
 Middle is an object that contains the center of each zone in the new grid.
\end_layout

\begin_layout Itemize
middle(1).x : X position of the center of the finely gridded zone 
\emph on
fine 
\emph default
in the new grid.
\end_layout

\begin_layout Itemize
middle.(2).y: Y position of the center of the finely gridded zone 
\emph on
otherfinezone 
\emph default
in the new grid.
\end_layout

\begin_layout Subsection
Adding dispersive materials
\end_layout

\begin_layout Standard
Dispersive materials like metals have a refractive index that varies with
 frequency.
 In BCALM those materials can be modelled using 
\emph on
multiple lorentz poles 
\emph default
whose parameters can be entered.
 For each material the 
\begin_inset Formula $w_{pm}$
\end_inset

, 
\begin_inset Formula $\omega_{m}$
\end_inset

 and 
\begin_inset Formula $\Gamma_{m}$
\end_inset

 have to be fitted to match the 
\begin_inset Formula $\epsilon(\omega)$
\end_inset

 in the frequency band of interest.
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{equation}
\epsilon(\omega)=1+\sum_{m=1}^{\#poles}\frac{w_{pm}^{2}}{\omega_{m}^{2}+j\omega\Gamma_{m}-\omega^{2}}\label{eq:lorentz}\end{equation}

\end_inset


\end_layout

\begin_layout Standard

\emph on
wpm=[4.386227824e15,1.008519648e15,7.251716026e15,1.332784755e16];
\end_layout

\begin_layout Standard

\emph on
wm=[0,1.874386332e15,3.534954035e15,0];
\end_layout

\begin_layout Standard

\emph on
gammam=[1.565488534e15 8.109675964e14 0 ,0]; 
\end_layout

\begin_layout Standard

\emph on
Au.poles=[wpm',wm',gammam']; 
\end_layout

\begin_layout Standard

\emph on
LinearGrid=AddMat(LinearGrid,'Au',1,0,Au.poles); 
\emph default
shows how it is done for gold.
\end_layout

\begin_layout Subsection
Adding symmetric boundary conditions
\end_layout

\begin_layout Standard
In order to reduce the simulation size, symmetric boundary conditions can
 be used when the structure is indeed symetric or anti-symetric.
 In BCALM one has to add Perfect Electric Conducting wall(symmetric normal
 electric fields) or Perfect Magnetic Conducting wall(symmetric normal magnetic
 fields).
 
\end_layout

\begin_layout Itemize

\emph on
Grid=SetAllBorders(Grid,'100000',1,'perfectlayerzone','PEC') 
\emph default
adds a PEC wall on the left side in the X direction.
 For symmentry in TE modes
\end_layout

\begin_layout Itemize

\emph on
Grid=SetAllBorders(Grid,'100000',1,'perfectlayerzone','PMC'); 
\emph default
adds a PMC wall on the left side in the X direction.
 For symmentry in TM mode
\emph on
s
\end_layout

\begin_layout Itemize

\emph on
Grid=SetAllBorders(Grid,'010000',1,'perfectlayerzone','PMC'); 
\emph default
adds a PMC wall on the right side in the X direction.
 For symmentry in TM mode
\emph on
s
\end_layout

\begin_layout Itemize

\emph on
Grid=SetAllBorders(Grid,'001000',1,'perfectlayerzone','PMC'); 
\emph default
adds a PMC wall on the left size in the Y direction.
 For symmentry in TM mode
\emph on
s
\end_layout

\begin_layout Standard
The binary number toggles the walls that have to be set as a PMC or a PEC
 from left to right:
\end_layout

\begin_layout Itemize
left side in the x direction
\end_layout

\begin_layout Itemize
right side in the x direction
\end_layout

\begin_layout Itemize
left side in the y direction
\end_layout

\begin_layout Itemize
right side in the y direction
\end_layout

\begin_layout Itemize
left side in the z direction
\end_layout

\begin_layout Itemize
right side in the z direction
\end_layout

\begin_layout Standard
NOTE: Don't forget to toggle off the CPML's on that particular border and
 use the uponly and downonly functions in the variable gridding.
\end_layout

\begin_layout Subsubsection
Plotting the with symmetry
\end_layout

\begin_layout Standard
In order to visualize the complete structure when using symmetric boundary
 conditions it is possible to specify the symmetry of the output in the
 object sent to the 
\emph on
PlotData 
\emph default
function.
\end_layout

\begin_layout Standard

\emph on
full.sym.x =1 
\emph default
will make sure that PlotData(full,Grid,[SimulInfoM.outfile 'In_Plane' tag
 'FFT']) mirrors the x axis
\series bold
 
\series default
in the plot.
\end_layout

\begin_layout Section
Used Yee cell and termination of the simulation space.
\end_layout

\begin_layout Standard
FDTD discretizes the continious space and time.
 Electric and magnetic fields are staggered in space and in time in a configurat
ion called the 
\emph on
Yee cell.
 
\emph default
The position of the fields within a Yee cell can be of importance when one
 wants to match simulation results to theory and to comprehend how the simulatio
ns space is terminated.
\end_layout

\begin_layout Subsection
Used Yee cell
\end_layout

\begin_layout Standard
The way the fields are staggered in space is depicted in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Yee-Cell-used"

\end_inset

.
 In consequence, 
\emph on
sources 
\emph default
and 
\emph on
the outputted values
\emph default
 of different fields withing a single Yee cell are not exactly positioned
 at its center.
 This needs to be taken in mind in the analysis of results.
 Note that a different formalism of the Yee cell is possible(i.e.
 with the 
\begin_inset Formula $E$
\end_inset

 and 
\begin_inset Formula $H$
\end_inset

 substituted).
 The Yee cell as depicted in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Yee-Cell-used"

\end_inset

 is the only one used in BCALM.
 To remember this, one can think that as the X coordinate increases we cross
 
\begin_inset Formula $H_{x}$
\end_inset

 first and 
\begin_inset Formula $E_{x}$
\end_inset

 last.
 This is valid for all directions.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
begin{tikzpicture}[scale = 1.5] 
\end_layout

\begin_layout Plain Layout

% style of faces 
\end_layout

\begin_layout Plain Layout


\backslash
tikzset{facestyle/.style={fill=white,draw=black,very thin,line join=round}}
 % face "back"  
\end_layout

\begin_layout Plain Layout


\backslash
tikzset{mydotted/.style={draw=black,thick,dashed }}
\end_layout

\begin_layout Plain Layout


\backslash
tikzset{myarrow/.style={draw=black,line width=2pt,->}}  
\end_layout

\begin_layout Plain Layout


\backslash
tikzset{myarrowaxis/.style={draw=black, thick,->,dashed}}  
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
begin{scope}[canvas is xz plane at y=4]  
\end_layout

\begin_layout Plain Layout


\backslash
path[facestyle] (0,0) rectangle (4,4);
\end_layout

\begin_layout Plain Layout


\backslash
draw[mydotted] (0,2)--(4,2);
\end_layout

\begin_layout Plain Layout


\backslash
draw[mydotted] (2,0)--(2,4);
\end_layout

\begin_layout Plain Layout


\backslash
end{scope} % face "up" 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
begin{scope}[canvas is zy plane at x=4]  
\end_layout

\begin_layout Plain Layout


\backslash
path[facestyle] (0,0) rectangle (4,4); 
\end_layout

\begin_layout Plain Layout


\backslash
draw[mydotted] (0,2)--(4,2);
\end_layout

\begin_layout Plain Layout


\backslash
draw[mydotted] (2,0)--(2,4);
\end_layout

\begin_layout Plain Layout


\backslash
end{scope} % face  "right" 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
begin{scope}[canvas is xy plane at z=4]  
\end_layout

\begin_layout Plain Layout


\backslash
path[facestyle] (0,0) rectangle (4,4);
\end_layout

\begin_layout Plain Layout


\backslash
draw[mydotted] (0,2)--(4,2);
\end_layout

\begin_layout Plain Layout


\backslash
draw[mydotted] (2,0)--(2,4);
\end_layout

\begin_layout Plain Layout


\backslash
end{scope} % face "up" 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

%% Plot the coordinate axis
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
begin{scope}[canvas is zy plane at x=2]  
\end_layout

\begin_layout Plain Layout


\backslash
draw[myarrowaxis] (2,2)--(8,2) node[above=6pt]{$X$};
\end_layout

\begin_layout Plain Layout


\backslash
draw[myarrowaxis] (2,2)--(2,6) node[above]{$Z$};
\end_layout

\begin_layout Plain Layout


\backslash
end{scope} 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
begin{scope}[canvas is xy plane at z=2]  
\end_layout

\begin_layout Plain Layout


\backslash
draw[myarrowaxis] (2,2)--(6,2) node[right=6pt]{$Y$};
\end_layout

\begin_layout Plain Layout


\backslash
fill[red](2,2) circle(1pt) node[above right]{$(0,0,0)$};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{scope} 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

% Placing the Arrows and the Fields
\end_layout

\begin_layout Plain Layout


\backslash
begin{scope}[canvas is zy plane at x=4]  
\end_layout

\begin_layout Plain Layout


\backslash
draw[myarrow] (1.5,4)--(2.5,4) node[pos=0.5,right=4pt]{$H_x$};
\end_layout

\begin_layout Plain Layout


\backslash
fill[red](2,4) circle(1pt) node[above=4pt]{$(0,0.5,0.5)$};
\end_layout

\begin_layout Plain Layout


\backslash
draw[myarrow] (4,1.5)--(4,2.5) node[pos=0.5,right=4pt]{$H_z$};
\end_layout

\begin_layout Plain Layout


\backslash
fill[red](4,2) circle(1pt) node[above right]{$(0.5,0.5,0)$};
\end_layout

\begin_layout Plain Layout


\backslash
end{scope} % face  "right" 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
begin{scope}[canvas is yx plane at z=4]  
\end_layout

\begin_layout Plain Layout


\backslash
draw[myarrow] (4,1.5)--(4,2.5) node[pos=0.5,below=4pt]{$H_y$};
\end_layout

\begin_layout Plain Layout


\backslash
fill[red](4,2) circle(1pt) node[above right]{$(0.5,0,0.5)$};
\end_layout

\begin_layout Plain Layout


\backslash
end{scope} % face  "right" 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
begin{scope}[canvas is yx plane at z=2]  
\end_layout

\begin_layout Plain Layout


\backslash
draw[myarrow] (2,4)--(2,5) node[above right]{$E_y$};
\end_layout

\begin_layout Plain Layout


\backslash
fill[red](2,4) circle(1pt) node[above right]{$(0,0.5,0)$};
\end_layout

\begin_layout Plain Layout


\backslash
draw[myarrow] (4,2)--(5,2) node[above left]{$E_z$};
\end_layout

\begin_layout Plain Layout


\backslash
fill[red](4,2) circle(1pt) node[above right]{$(0,0,0.5)$};
\end_layout

\begin_layout Plain Layout


\backslash
end{scope} % face  "right" 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
begin{scope}[canvas is zy plane at x=2]  
\end_layout

\begin_layout Plain Layout


\backslash
draw[myarrow] (4,2)--(5,2) node[right=5pt]{$E_x$};
\end_layout

\begin_layout Plain Layout


\backslash
fill[red](4,2) circle(1pt) node[above right]{$(0.5,0,0)$};
\end_layout

\begin_layout Plain Layout


\backslash
end{scope} % face  "right
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture} 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Yee-Cell-used"

\end_inset

Yee Cell used
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Boundary conditions.
\end_layout

\begin_layout Standard
It is important to understand how BCALM terminates its simulations by default.
 Numereous errors originate in a misinterpretation on how this actually
 happens.
 
\emph on
When not specifying any boundaries,
\emph default
 the simulation space is terminated by a 
\emph on
Perfect Magnetic Conducting
\emph default
 wall on the left bound in every direction and by a 
\emph on
Perfect Electric Conducting Wall 
\emph default
on the right bound in every direction.
 This is illustrated in the 
\emph on
X direction 
\emph default
by figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Boundary conditions"

\end_inset

.
 The fields that are 
\emph on
in 
\emph default
the simulation space are denoted in black(i.e.
 these are the cells that can be sourced and are outputted).
 The cell 
\begin_inset Formula $1$
\end_inset

 in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Boundary conditions"

\end_inset

 is therefore the the first cell in the 
\emph on
X direction
\emph default
 and cell 
\begin_inset Formula $end$
\end_inset

 the last cell in the 
\emph on
X direction
\emph default
 in the actual Matlab interface.
 Imaginary cells that are 
\emph on
outside 
\emph default
the simulation space are denoted in by dashed blue lines.(i.e.
 these are cells that cannot be sourced and they are not part of the outputted
 fields).
 BCALM always assumes the fields that precede the first cell and follow
 the the last cell in every direction to be zero, creating a 
\emph on
PMC 
\emph default
wall on the left bound and 
\emph on
PEC 
\emph default
wall on the right bound in every direction.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
begin{tikzpicture}[scale = 1] 
\end_layout

\begin_layout Plain Layout

% style of faces 
\end_layout

\begin_layout Plain Layout


\backslash
tikzset{facestyle/.style={fill=white,draw=black,very thin,line join=round}}
 % face "back"  
\end_layout

\begin_layout Plain Layout


\backslash
tikzset{mydotted/.style={draw=black,thick,dashed }}
\end_layout

\begin_layout Plain Layout


\backslash
tikzset{myarrow/.style={draw=black,line width=2pt,->}}  
\end_layout

\begin_layout Plain Layout


\backslash
tikzset{myarrowend/.style={draw=blue,line width=2pt,->,dashed}} 
\end_layout

\begin_layout Plain Layout


\backslash
tikzset{myarrowaxis/.style={draw=black, thick,->}}  
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
draw[myarrowaxis](-1,0)--(11,0) node[right]{$X$};
\end_layout

\begin_layout Plain Layout


\backslash
draw[myarrowend](0,0)node[below]{$0$}--(0,4) node[sloped,pos=0.5,above]{$E_x=0$,$
H_y=0$,$H_z=0$} node[right,rotate=90]{PMC wall};
\end_layout

\begin_layout Plain Layout


\backslash
draw[myarrow](1,0)node[below]{$1$}--(1,4) node[sloped,pos=0.5,above]{$H_x$,$E_y$,
$E_z$};
\end_layout

\begin_layout Plain Layout


\backslash
draw[myarrow](2,0)node[below]{$1$}--(2,4) node[sloped,pos=0.5,above]{$E_x$,$H_y$,
$H_z$};
\end_layout

\begin_layout Plain Layout


\backslash
draw[myarrow](3,0)node[below]{$2$}--(3,4) node[sloped,pos=0.5,above]{$H_x$,$E_y$,
$E_z$};
\end_layout

\begin_layout Plain Layout


\backslash
draw[myarrow](4,0)node[below]{$2$}--(4,4) node[sloped,pos=0.5,above]{$E_x$,$H_y$,
$H_z$};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
draw[myarrowend](10,0)node[left,rotate=90]{$end +1$}--(10,4) node[sloped,pos=0.5,
above]{$H_x=0$,$E_y=0$,$E_z=0$} node[right,rotate=90]{PEC wall}; 
\end_layout

\begin_layout Plain Layout


\backslash
draw[myarrow](8,0)node[left,rotate=90]{$end$}--(8,4) node[sloped,pos=0.5,above]{$
H_x$,$E_y$,$E_z$};
\end_layout

\begin_layout Plain Layout


\backslash
draw[myarrow](9,0)node[left,rotate=90]{$end$}--(9,4) node[sloped,pos=0.5,above]{$
E_x$,$H_y$,$H_z$};
\end_layout

\begin_layout Plain Layout


\backslash
draw[myarrow](6,0)node[left,rotate=90]{$end-1$}--(6,4) node[sloped,pos=0.5,above]
{$H_x$,$E_y$,$E_z$};
\end_layout

\begin_layout Plain Layout


\backslash
draw[myarrow](7,0)node[left,rotate=90]{$end-1$}--(7,4) node[sloped,pos=0.5,above]
{$E_x$,$H_y$,$H_z$};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture} 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Boundary conditions"

\end_inset

 Default boundary conditions
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
User defined boundary conditions 
\end_layout

\begin_layout Standard
User defined boundary conditions overrule the default ones but they potentially
 create fields that are unphysical at the border.
 There artifacts do not have a influence on the simulation results.
 This is illustrated in the 
\emph on
X 
\emph default
direction in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Boundary conditions-1"

\end_inset

 where a PMC wall is defined(in green) on both sides(analogue in other direction
s and for PEC).
 In this case, on the left bound, fields(in red) exist that are squeezed
 between the imaginary PMC and the user defined PMC.
 Despite the fact that these artifacts are blocked of by the user defined
 PMC wall, those fields will be unphysical.
 Consequently, it is better define PMC walls on the right bound and use
 the imaginary PMC on the left bound as depicted in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Boundary conditions-2"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
begin{tikzpicture}[scale = 1] 
\end_layout

\begin_layout Plain Layout

% style of faces 
\end_layout

\begin_layout Plain Layout


\backslash
tikzset{facestyle/.style={fill=white,draw=black,very thin,line join=round}}
 % face "back"  
\end_layout

\begin_layout Plain Layout


\backslash
tikzset{mydotted/.style={draw=black,thick,dashed }}
\end_layout

\begin_layout Plain Layout


\backslash
tikzset{myarrow/.style={draw=black,line width=2pt,->}}  
\end_layout

\begin_layout Plain Layout


\backslash
tikzset{myarrowend/.style={draw=blue,line width=2pt,->,dashed}} 
\end_layout

\begin_layout Plain Layout


\backslash
tikzset{myarrowpec/.style={draw=green,line width=2pt,->}} 
\end_layout

\begin_layout Plain Layout


\backslash
tikzset{myarrowaxis/.style={draw=black, thick,->}}  
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
draw[myarrowaxis](-1,0)--(11,0) node[right]{$X$};
\end_layout

\begin_layout Plain Layout


\backslash
draw[myarrowend](0,0)node[below]{$0$}--(0,4) node[sloped,pos=0.5,above]{$E_x=0$,$
H_y=0$,$H_z=0$} node[right,rotate=90]{PMC wall};
\end_layout

\begin_layout Plain Layout


\backslash
draw[myarrow,color=red!50!black](1,0)node[below]{$1$}--(1,4) node[sloped,pos=0.5,
above]{$H_x$,$E_y$,$E_z$} node[right,rotate=90]{Non Physical};;
\end_layout

\begin_layout Plain Layout


\backslash
draw[myarrow,color=green!50!black](2,0)node[below]{$1$}--(2,4) node[sloped,pos=0.
5,above]{$E_x=0$,$H_y=0$,$H_z=0$}node[right,rotate=90]{User defined PMC
 wall};
\end_layout

\begin_layout Plain Layout


\backslash
draw[myarrow](3,0)node[below]{$2$}--(3,4) node[sloped,pos=0.5,above]{$H_x$,$E_y$,
$E_z$};
\end_layout

\begin_layout Plain Layout


\backslash
draw[myarrow](4,0)node[below]{$2$}--(4,4) node[sloped,pos=0.5,above]{$E_x$,$H_y$,
$H_z$};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
draw[myarrowend](10,0)node[left,rotate=90]{$end +1$}--(10,4) node[sloped,pos=0.5,
above]{$H_x=0$,$E_y=0$,$E_z=0$} node[right,rotate=90]{PEC wall}; ;
\end_layout

\begin_layout Plain Layout


\backslash
draw[myarrow](8,0)node[left,rotate=90]{$end$}--(8,4) node[sloped,pos=0.5,above]{$
H_x$,$E_y$,$E_z$};
\end_layout

\begin_layout Plain Layout


\backslash
draw[myarrow,color=green!50!black](9,0)node[left,rotate=90]{$end$}--(9,4)node[sl
oped,pos=0.5,above]{$E_x=0$,$H_y=0$,$H_z=0$}node[right,rotate=90]{User defined
 PMC wall};
\end_layout

\begin_layout Plain Layout


\backslash
draw[myarrow](6,0)node[left,rotate=90]{$end-1$}--(6,4) node[sloped,pos=0.5,above]
{$H_x$,$E_y$,$E_z$};
\end_layout

\begin_layout Plain Layout


\backslash
draw[myarrow](7,0)node[left,rotate=90]{$end-1$}--(7,4) node[sloped,pos=0.5,above]
{$E_x$,$H_y$,$H_z$};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture} 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Boundary conditions-1"

\end_inset

 User defined boundary conditions
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
begin{tikzpicture}[scale = 1] 
\end_layout

\begin_layout Plain Layout

% style of faces 
\end_layout

\begin_layout Plain Layout


\backslash
tikzset{facestyle/.style={fill=white,draw=black,very thin,line join=round}}
 % face "back"  
\end_layout

\begin_layout Plain Layout


\backslash
tikzset{mydotted/.style={draw=black,thick,dashed }}
\end_layout

\begin_layout Plain Layout


\backslash
tikzset{myarrow/.style={draw=black,line width=2pt,->}}  
\end_layout

\begin_layout Plain Layout


\backslash
tikzset{myarrowend/.style={draw=blue,line width=2pt,->,dashed}} 
\end_layout

\begin_layout Plain Layout


\backslash
tikzset{myarrowpec/.style={draw=green,line width=2pt,->}} 
\end_layout

\begin_layout Plain Layout


\backslash
tikzset{myarrowaxis/.style={draw=black, thick,->}}  
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
draw[myarrowaxis](-1,0)--(11,0) node[right]{$X$};
\end_layout

\begin_layout Plain Layout


\backslash
draw[myarrowend](0,0)node[below]{$0$}--(0,4) node[sloped,pos=0.5,above]{$E_x=0$,$
H_y=0$,$H_z=0$} node[right,rotate=90]{PMC wall};
\end_layout

\begin_layout Plain Layout


\backslash
draw[myarrow](1,0)node[below]{$1$}--(1,4) node[sloped,pos=0.5,above]{$H_x$,$E_y$,
$E_z$};
\end_layout

\begin_layout Plain Layout


\backslash
draw[myarrow](2,0)node[below]{$1$}--(2,4) node[sloped,pos=0.5,above]{$E_x$,$H_y$,
$H_z$};
\end_layout

\begin_layout Plain Layout


\backslash
draw[myarrow](3,0)node[below]{$2$}--(3,4) node[sloped,pos=0.5,above]{$H_x$,$E_y$,
$E_z$};
\end_layout

\begin_layout Plain Layout


\backslash
draw[myarrow](4,0)node[below]{$2$}--(4,4) node[sloped,pos=0.5,above]{$E_x$,$H_y$,
$H_z$};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
draw[myarrowend](10,0)node[left,rotate=90]{$end +1$}--(10,4) node[sloped,pos=0.5,
above]{$H_x=0$,$E_y=0$,$E_z=0$} node[right,rotate=90]{PEC wall};
\end_layout

\begin_layout Plain Layout


\backslash
draw[myarrow](8,0)node[left,rotate=90]{$end$}--(8,4) node[sloped,pos=0.5,above]{$
H_x$,$E_y$,$E_z$};
\end_layout

\begin_layout Plain Layout


\backslash
draw[myarrow,color=green!50!black](9,0)node[left,rotate=90]{$end$}--(9,4)node[sl
oped,pos=0.5,above]{$E_x$,$H_y$,$H_z$}node[right,rotate=90]{User defined
 PMC wall};
\end_layout

\begin_layout Plain Layout


\backslash
draw[myarrow](6,0)node[left,rotate=90]{$end-1$}--(6,4) node[sloped,pos=0.5,above]
{$H_x$,$E_y$,$E_z$};
\end_layout

\begin_layout Plain Layout


\backslash
draw[myarrow](7,0)node[left,rotate=90]{$end-1$}--(7,4) node[sloped,pos=0.5,above]
{$E_x$,$H_y$,$H_z$};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture} 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Boundary conditions-2"

\end_inset

 User defined boundary conditions
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Generalities to get maximum performance in simulation.
\end_layout

\begin_layout Standard
In order to get maximal speedup one has to define the simulations in a way
 that maps well onto the core algorithm inside 
\emph on
fdtd.
 
\emph default
When following the following rules that should, this is the case.
 
\end_layout

\begin_layout Subsection
Importance of the simulation orientation
\end_layout

\begin_layout Standard
The simulation speed improves if the length of 
\emph on
Z 
\emph default
dimension of the simulation space is the smaller than the length of the
 
\emph on
X 
\emph default
and 
\emph on
Y 
\emph default
dimension.
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="4">
<features>
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Simulation
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Y
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Z
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
128 cells
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
64 cells
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
256 cells
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
B
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
128 cells
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
256 cells
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
64 cells
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:Simulation-orientation"

\end_inset

Simulation orientation 
\end_layout

\end_inset


\end_layout

\end_inset

In table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Simulation-orientation"

\end_inset

 Simulation B would be substantially faster than simulation A.
\end_layout

\begin_layout Subsection
Orientation of the output zones
\end_layout

\begin_layout Standard
The simulation speed improves if the user preferentially defines output
 zones containing all the cells in the
\emph on
 X 
\emph default
direction rather than all the cells in the 
\emph on
Y 
\emph default
or the 
\emph on
Z 
\emph default
dimension.
 In table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Output-zones-speed"

\end_inset

 exporting Output A and Output B will be equally fast as one of their dimensions
 contains all 128 cells in the 
\emph on
X 
\emph default
direction.
 Output C, will slow down the simulation as 128 cells are exported in the
 
\emph on
Y 
\emph default
and the 
\emph on
Z 
\emph default
direction.
 
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="4">
<features>
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Output
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Y
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Z
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Output A
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
128 cells
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
128 cells
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1 cell
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Output B
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
128 cells 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1 cell
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
128 cells
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Output C
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1cell
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
128 cells
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
128 cells
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:Output-zones-speed"

\end_inset

Output zones speed
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
