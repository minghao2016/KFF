%% This function reads the property and the mattype field and turns it
%% into something readable with a legend.


function [data,cell]=processtopology(mplot,mattype,property,amat)

%% Make sure those match with the ConstantMemoryInit.h

global BIT_MATTYPE_FIELD
global BIT_DEPS
global FIRST_BIT_DEPS
global grid
global delta
global LIMIT

global BIT_SOURCE
global FIRST_BIT_SOURCE
global FIRST_BIT_LORENTZ
global BIT_LORENTZ
global mmattype
global mlorentz
global mdielectric

global mcpml
global mperfectlayer
global msource



global SIMPLEDIEL                                    
global SOURCE                                         
global PERFECTLAYER                             
global LORENTZ                                          
global CPML                                            
global LORENTZCPML                                     
global DUMMYCPML                                         
global directions;


BIT_MATTYPE_FIELD=4;                                % Mattype
BIT_AMAT_FIELD=10;                                  % Anisotropic Materials
BIT_DEPS= 8;                                        % Number of bits allocated for the material type.
FIRST_BIT_DEPS=0;                                   % First bit for the dielectric properties in the property field


BIT_SOURCE= 16;                                     % Number of bits allowed for a source
FIRST_BIT_SOURCE=(FIRST_BIT_DEPS+BIT_DEPS);         % First bit for the dielectric properties in the property field
FIRST_BIT_LORENTZ=(FIRST_BIT_SOURCE+BIT_SOURCE);    % First bit for the lorentz properties in the property field
BIT_LORENTZ=8;                                      % Number of bits allocated for the lorentz type



SIMPLEDIEL= 0;                                       %% index of matype for a simple dielectricum
SOURCE =1;                                           %%  Index for a source
PERFECTLAYER =2;                                     %% Index of a perfect layer.
LORENTZ =4;                                          %%  Index of a lorentzcell
CPML = 8;                                            %%  CPML


msource=2;
mperfectlayer=1;
mcpml=0;



fields=[{'Ex'},{'Ey'},{'Ez'},{'Hx'},{'Hy'},{'Hz'}];% Fields.
selectormattype=bitshift(uint32(1),BIT_MATTYPE_FIELD)-1;
selectoramat=bitshift(uint32(1),BIT_AMAT_FIELD)-1;
selectorlorentz=bitshift(uint32(1),BIT_LORENTZ)-1;
selectordeps=bitshift(uint32(1),BIT_DEPS)-1;



mattype=uint32(mattype);
property=uint32(property);
amat=uint32(amat);

for i=1:length(fields)
    if strcmp(mplot.gridfield,fields{i})

        mmattype=bitand(bitshift(mattype,-(i-1)*BIT_MATTYPE_FIELD),selectormattype);
        mlorentz=bitand(bitshift(property,FIRST_BIT_LORENTZ),selectorlorentz);
        if ((max(max(max(amat)))==INTMAX('uint32'))||(i>3)) %If old version of the simulator or H field.
        mdielectric=bitand(bitshift(property,FIRST_BIT_DEPS),selectordeps);
        else
        mdielectric=bitand(bitshift(amat,-(i-1)*BIT_AMAT_FIELD),selectoramat);
        end
    end
end

dim=size(mattype);
cell.dieladded=zeros(1,length(grid.deps));   %% Number of dielectrics found so far
if isfield(grid,'lorentz');
cell.lorentzadded=zeros(1,length(grid.lorentz));   %% Number of dielectrics found so far
end
cell.maxlorentz=-1;%% Number of Lorentz cells found so far
cell.names=[{'CPML'},{'PERFECTLAYER'},{'SOURCE'}];    %Names to put into the legend.
cell.minvalue=0;
cell.maxvalue=0;


dmattype = double(mmattype(LIMIT.x, LIMIT.y, LIMIT.z));
ddielectric = double(mdielectric(LIMIT.x, LIMIT.y, LIMIT.z));
dlorentz = double(mlorentz(LIMIT.x, LIMIT.y, LIMIT.z));

%% Set the limits right in case of one dimentional topology
[a,b,c]=size(dmattype);
LIMIT.x=(1:a);
LIMIT.y=(1:b);
LIMIT.z=(1:c);

%% Find all dielectrics, CPML, PERFECTLAYER, SOURCE
dielidx = find(dmattype==SIMPLEDIEL);
cpmlidx = find(bitand(dmattype,CPML));
perfectlayeridx = find(bitand(dmattype,PERFECTLAYER));
sourceidx = find(bitand(dmattype,SOURCE));


% Get their names
alldiels = unique(ddielectric(dielidx)) + 1
dielnames=[];
for ii = 1:length(alldiels)
    dielnames{ii} = grid.deps(alldiels(ii)).name;
end

% Make a 123 secquence of the dielectrica. 
% If Diel 1 and 3 is only present a to high value is added in the output

for ii=1:length(alldiels)
    if alldiels(ii)>ii
    tosub=find(ddielectric(dielidx)>ii-1);
    ddielectric(dielidx(tosub))=ddielectric(dielidx(tosub))-(alldiels(ii)-ii);
    alldiels(ii:end)=alldiels(ii:end)-(alldiels(ii)-ii);
    end
        
 end

%% Find all lorentz
lorentzidx = find(bitand(dmattype,LORENTZ));

% Get their names
alllorentz = unique(dlorentz(lorentzidx)) + 1;
lorentznames=[];
for ii = 1:length(alllorentz)
    lorentznames{ii} = grid.lorentz(alllorentz(ii)).name
end

%% Find the LORENTZCPML SOURCECPML
lcpmlidx=find((bitand(dmattype,LORENTZ)&bitand(dmattype,CPML)));
scpmlidx=find((bitand(dmattype,SOURCE)&bitand(dmattype,CPML)));


%% Fill in the data structure
data = zeros(size(dmattype));
data(dielidx) = ddielectric(dielidx) + 3;
data(lorentzidx) = dlorentz(lorentzidx) + 3 + length(alldiels);
data(cpmlidx) = mcpml;
data(sourceidx) = msource;
data(perfectlayeridx) = mperfectlayer;
data(lcpmlidx)=mcpml+0.5;%lorentzcpml
data(scpmlidx)=mcpml+0.5;%Sourcecpml

cell.names = [cell.names dielnames lorentznames];
cell.maxvalue = max(max(data));

end